/////////////////////TASK A
//constant
val my_string = "Hello"

//variable
var my_string = "Hello"

//print variable
print(x)

//variable with declared type
var x:Long = 0




/////////////////////TASK B



//create a list
val numbers = List(2, 13, 7, 22)

//lambda expression on list
val doubled = numbers.map(x => x * 2)
numbers.map(_ * 2)

//returns a range containing integers from 1 to 10
1 to 10

//reduce method takes all items in a collection and combines them for a single output
(1 to 10).reduce((x, y) => x + y)
(1 to 10).reduce(_ + _)

//the filter method can filter a collection
val numers = List(2, -1, 3, 2, 100, 13, 7, 22)
numbers.filter(_ > 5)




/////////////////////TASK C





//CREATE A TUPLE AND PRINT 1ST and 2ND VALUES
val tuple = ("Joe Citizen", 22, true)
print(tuple._1)
print(tuple._2)

//ZIP COMBINES 2 LISTS INTO 1 LIST
print(List(1, 2, 3).zip(List(4, 5, 6))) 
//output
List((1, 4), (2, 5), (3, 6))


//////////////////////TASK D

//arrays are sccessed via functions (hence () not []) also mutable so you can change the values in an array
val numbers = Array(2, 13, 7, 22)
val x = numbers(0)
numbers(2) = 10

//Lists are immutable and therefore a new list is created everytime you add something to it
//this adds 'E' to the start of the list
var letters = List("A", "B", "C", "D")
letters = "E"::letters

//this adds letters to the start of the animals list
val animals = List("Cat", "Dog", "Shark", "Elephant")
letters = letters:::animals

//this creates a map that stores key value pairs, but cannot be added to
var daysInMonth = Map("January" -> 31, "Feburary" -> 28, "March" -> 31, "April" -> 30)
daysInMonth("January")
/*this cannot work*/daysInMonth("May") = 31

//this type of map can have items added NOTE!!: VAL AND VAR ONLY APPLY TO dayInMonth ITSELF NOT THE MAP IT STORES
val daysInMonth = scala.collection.mutable.Map("January" -> 31, "Feburary" -> 28, "March" -> 31, "April" -> 30)
daysInMonth("May") = 31

//this val only stores tuples whose month is February
//so the pairs in the map are just considered tuples as far as filter is concerned
val results = daysInMonth.filter(a => a._1 == "Feburary" )
print(results)



//////////////////////TASK E


//This is a function that does not return anything
def greet(name:String) {
	println("Hello " + name + "!")
}

//This function does return an int 
//NOTE scala assumes you want to return the last thing in the function
//NOTE return type MUST be expressed
def multiply(x:Int, y:Int) : Int = {
	x * y
}

//This calles the function
val names = List("Peter", "John", "Mary", "Henry")
names.foreach(greet(_))


//this uses above multiply function
//maps the numbers in the numbers variable list and the number 3 into the multiply function
val numbers = 1 to 10
val largerNumbers = numbers.map(multiply(_, 3))



//////////////////////TASK F

//This works the same way as java's switch statement
val x = 2

scala> x match {
case 1 => print("one")
case 2 => print("two")
case 3 => print("three")
}

//Scala's switch statement can work on anything
val thing:Any = ("Jim", 21)
thing match {
case (name, age:Int) if age < 18 => print(name + " is young")
case (name, 18) => print(name + " is eighteen")
case (name, age) => print(name + " is an adult")
case _ => print("This isnâ€™t a person!")
}

//This function maps a list to the match statement
val numbers = List(1, 4, 3, 7, 5, 9)
val mapped = numbers.map(_ match {
case 5 => 0
case x if x < 5 => -1
case x if x > 5 => 1
})




















//declare varible set to my name then change it to an int
var name = "jake"
var name:Int = 22

//divide all numbers in a list by 2 then multiply them all together
numbers.map(_ / 2.0).reduce(_ * _)
numbers.map(x => x / 2.0).reduce((x, y) => x * y)

//check words smaller than 7 and add 's' to the end of the words
words.filter(_.length < 7).map(_ + "s")
words.filter(_.length < 7).map(x => x + "s")

//perform a dot vector calculation
val u = List(2, 5, 3)
val v = List(4, 3, 7)
val dot = u.zip(v).map(x => x._1 * x._2).reduce((x, y) => x + y)

//map number of days to each month
val daysInMonth = Map("January" -> 31, "Feburary" -> 28, "March" -> 31, "April" -> 30)
val months = Array("January", "March", "January", "April")
val days = months.map(x => daysInMonth(x))

//takes a string and and int and returns the char at the int position in the string
def extract(word:String, n:Int) : Char = {
	
	if(word.length <= n){
		return '-'
	}
	else{
		return word(n)
	}
}

//takes numbers 1 to 10 and mapps them to random numbers
val numbers = (1 to 10)
val result = numbers.map(_ match {
case 1 => 2
case 2 => 1
case 3 => 6
case 4 => 2
case 5 => 10
case 6 => 3
case 7 => 14
case 8 => 4
case 9 => 18
case 10 => 5
})


//This function takes a collection of any type and returns the highest value
def find_max(x:Seq[Int]) : Int = {
	x.reduce((x, y) => Math.max(x, y))
}

def matchedNumbers(x:Seq[Int], y:Seq[Int]) : Seq[Int] = {

	x.zip(y).filter(x => x._1 == x._2).map(x => x._1)

}

def eligibility(x:Any) : Boolean = {
	x match{
		case (name, age:Int, gender:String) if age < 13 && gender == "male" => return true
		case (name, age:Int, gender:String) if age >= 13 && gender == "female" => {print(name + " is too old and not male\n"); return false}
		case (name, age, gender:String) if gender == "female" => {print(name + "is not male\n"); return false}
		case (name, age:Int, gender) if age >= 13 => {print(name + "is too old\n"); return false}
		case _ => {print("this is not a person"); return false}
	}
}
